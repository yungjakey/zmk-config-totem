//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define BASE 0
#define NAV  1
#define SYM  2
#define MOO  3

&caps_word { continue-list = <UNDERSCORE BACKSPACE DELETE LEFT_ARROW DOWN_ARROW UP_ARROW RIGHT_ARROW HOME END PAGE_DOWN PAGE_UP>; };

&mt { tapping-term-ms = <150>; };

/ {
    combos {
        compatible = "zmk,combos";

        rbrace {
            bindings = <&rbrace>;
            key-positions = <12 13>;
        };

        sbrace {
            bindings = <&sbrace>;
            key-positions = <23 24>;
        };

        cbrace {
            bindings = <&cbrace>;
            key-positions = <22 25>;
        };

        escape {
            bindings = <&kp ESCAPE>;
            key-positions = <16 17>;
            layers = <0>;
        };

        clear_bluetooth {
            bindings = <&bt BT_CLR>;
            key-positions = <20 31>;
        };
    };

    behaviors {
        double_quote: double_quote {
            compatible = "zmk,behavior-tap-dance";
            label = "DOUBLE_QUOTE";
            #binding-cells = <0>;
            bindings = <&kp DOUBLE_QUOTES>, <&dquote>;
        };

        single_quote: single_quote {
            compatible = "zmk,behavior-tap-dance";
            label = "SINGLE_QUOTE";
            #binding-cells = <0>;
            bindings = <&kp SQT>, <&squote>;
        };

        grave_quote: grave_quote {
            compatible = "zmk,behavior-tap-dance";
            label = "GRAVE_QUOTE";
            #binding-cells = <0>;
            bindings = <&kp GRAVE>, <&gquote>;
        };

        mt_left: mt_left {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_LEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 26 27 28 29 30 31 32 33 34 35 37 36>;
            require-prior-idle-ms = <100>;
            tapping-term-ms = <250>;
            quick-tap-ms = <150>;
        };

        mt_right: mt_right {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_RIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            hold-trigger-on-release;
            require-prior-idle-ms = <100>;
            tapping-term-ms = <250>;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 22 23 24 25 20 21 32 33 34 35 36 37>;
            quick-tap-ms = <150>;
        };

        comma_semicolon: comma_semicolon {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_SEMICOLON";
            bindings = <&kp COMMA>, <&kp SEMICOLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        period_colon: period_colon {
            compatible = "zmk,behavior-mod-morph";
            label = "PERIOD_COLON";
            bindings = <&kp PERIOD>, <&kp COLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        question_exclamation: question_exclamation {
            compatible = "zmk,behavior-mod-morph";
            label = "QUESTION_EXCLAMATION";
            bindings = <&kp QUESTION>, <&kp EXCLAMATION>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        slash_backslash: slash_backslash {
            compatible = "zmk,behavior-mod-morph";
            label = "SLASH_BACKSLASH";
            bindings = <&kp SLASH>, <&kp BACKSLASH>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mt_sk: mt_sk {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_SK";
            bindings = <&kp>, <&sk>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
        };

        td_caps: td_caps {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_CAPS";
            #binding-cells = <0>;
            bindings = <&mt_sk LEFT_SHIFT LEFT_SHIFT>, <&caps_word>;
        };

        backspace_delete: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            label = "BACKSPACE_DELETE";
            bindings = <&kp BACKSPACE>, <&kp DELETE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mt_kt: mt_kt {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_KT";
            bindings = <&kp>, <&kt>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        lt_sk: lt_sk {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_SK";
            bindings = <&mo>, <&mt_sk>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    macros {
        dquote: dquote {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp DOUBLE_QUOTES &kp DOUBLE_QUOTES &kp LEFT>,
                <&macro_press>;

            label = "DQUOTE";
        };

        squote: squote {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SINGLE_QUOTE &kp SINGLE_QUOTE &kp LEFT>;
            label = "SQUOTE";
        };

        gquote: gquote {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GRAVE &kp GRAVE &kp GRAVE &kp GRAVE &kp GRAVE &kp GRAVE &kp LEFT &kp LEFT &kp LEFT>;
            label = "GQUOTE";
        };

        rbrace: lbrace {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_PARENTHESIS &kp RIGHT_PARENTHESIS &kp LEFT>;
            label = "LBRACE";
        };

        sbrace: rbrace {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACKET &kp RIGHT_BRACKET &kp LEFT>;
            label = "RBRACE";
        };

        cbrace: cbrace {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACE &kp RIGHT_BRACE &kp LEFT>;
            label = "CBRACE";
        };

        larrow: larrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LESS_THAN &kp MINUS>;
            label = "LARROW";
        };

        rarrow: rarrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp MINUS &kp GREATER_THAN>;
            label = "RARROW";
        };

        select_line: select_line {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp HOME &kp LS(END)>;
            label = "SELECT_LINE";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

        base {
            // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓

            label = "BASE";

            // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
            //             ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓   ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓
            //             ┃     Q     ┃     W     ┃     E     ┃     R     ┃     T     ┃   ┃     Z     ┃     U     ┃     I     ┃     O     ┃     P     ┃
            //             ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫
            //             ┃     A     ┃     S     ┃     D     ┃     F     ┃     G     ┃   ┃     H     ┃     J     ┃     K     ┃     L     ┃     -     ┃
            // ┏━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┓
            // ┃           ┃     Y     ┃     X     ┃     C     ┃     V     ┃     B     ┃   ┃     N     ┃     M     ┃     ,     ┃     .     ┃    TAB    ┃           ┃
            // ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛
            //                                     ┃  SK SHFT  ┃    MO1    ┃    ESC    ┃   ┃   SPACE   ┃    MO2    ┃   ENTER   ┃
            //                                     ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛   ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛

            bindings = <
       &kp Q  &kp W  &kp E     &kp R                &kp T        &kp Y      &kp U         &kp I             &kp O          &kp P
       &kp A  &kp S  &kp D     &kp F                &kp G        &kp H      &kp J         &kp K             &kp L          &backspace_delete
&none  &kp Z  &kp X  &kp C     &kp V                &kp B        &kp N      &kp M         &comma_semicolon  &period_colon  &kp TAB            &none
                     &td_caps  &lt 0 LA(BACKSPACE)  &kp SPACE    &kp SPACE  &lt 0 RETURN  &td_caps
            >;
        };

        layer_1 {
            bindings = <
        &trans  &trans    &trans     &trans    &trans    &trans  &trans    &trans     &trans    &trans
        &trans  &kp LALT  &kp LCTRL  &kp LGUI  &trans    &trans  &kp LGUI  &kp LCTRL  &kp LALT  &trans
&trans  &trans  &trans    &trans     &trans    &trans    &trans  &trans    &trans     &trans    &trans  &trans
                          &trans     &trans    &trans    &trans  &trans    &trans
            >;
        };

        layer_2 {
            bindings = <
        &trans  &trans    &trans     &trans    &trans    &trans    &trans     &trans     &trans     &trans
        &trans  &kp LALT  &kp LCTRL  &kp LGUI  &trans    &kp LEFT  &kp DOWN   &kp UP     &kp RIGHT  &trans
&trans  &trans  &trans    &trans     &trans    &trans    &kp HOME  &kp PG_DN  &kp PG_UP  &kp END    &trans  &trans
                          &trans     &trans    &trans    &trans    &trans     &trans
            >;
        };

        layer_3 {
            bindings = <
        &kp LS(EXCL)  &kp LS(AT)    &kp LS(POUND)  &kp LS(DLLR)  &kp LS(PRCNT)    &kp LS(CARET)  &kp LS(AMPS)  &kp LS(STAR)  &kp LS(PLUS)  &kp LS(QMARK)
        &trans        &kp LALT      &kp LCTRL      &kp LGUI      &trans           &trans         &kp LGUI      &kp LCTRL     &kp LALT      &kp MINUS
&trans  &trans        &kp LS(LPAR)  &kp LBKT       &kp RBKT      &kp LS(RPAR)     &trans         &trans        &trans        &trans        &kp BSLH       &trans
                                    &trans         &trans        &trans           &trans         &trans        &trans
            >;
        };

        layer_4 {
            bindings = <
        &kp N1  &kp N2      &kp N3        &kp N4        &kp N5        &kp N6  &kp N7    &kp N8     &kp N9    &kp N0
        &trans  &kp LALT    &kp LCTRL     &kp LGUI      &trans        &trans  &kp LGUI  &kp LCTRL  &kp LALT  &kp LS(UNDER)
&trans  &trans  &kp LS(LT)  &kp LS(LBRC)  &kp LS(RBRC)  &kp LS(GT)    &trans  &trans    &trans     &trans    &kp BSLH       &trans
                            &trans        &trans        &trans        &trans  &trans    &trans
            >;
        };
    };
};

//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define BASE 0
#define NAV  1
#define SYM  2
#define MOO  3

&caps_word { continue-list = <UNDERSCORE BACKSPACE DELETE LEFT_ARROW DOWN_ARROW UP_ARROW RIGHT_ARROW HOME END PAGE_DOWN PAGE_UP>; };

&mt { tapping-term-ms = <150>; };

&sk { quick-release; };

/ {
    combos {
        compatible = "zmk,combos";

        clear_bluetooth {
            bindings = <&bt BT_CLR>;
            key-positions = <20 31>;
        };

        delete_word_forward {
            bindings = <&kp LA(DELETE)>;
            key-positions = <16 17>;
            layers = <2>;
        };

        delete_word_backward {
            bindings = <&kp LA(BACKSPACE)>;
            key-positions = <16 17>;
            layers = <0>;
        };
    };

    behaviors {
        double_quote: double_quote {
            compatible = "zmk,behavior-tap-dance";
            label = "DOUBLE_QUOTE";
            #binding-cells = <0>;
            bindings = <&kp DOUBLE_QUOTES>, <&dquote2>;
        };

        single_quote: single_quote {
            compatible = "zmk,behavior-tap-dance";
            label = "SINGLE_QUOTE";
            #binding-cells = <0>;
            bindings = <&kp SINGLE_QUOTE>, <&squote2>;
        };

        mt_left: mt_left {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_LEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 26 27 28 29 30 31 32 33 34 35 37 36>;
            require-prior-idle-ms = <100>;
            tapping-term-ms = <250>;
            quick-tap-ms = <150>;
        };

        mt_right: mt_right {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_RIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            hold-trigger-on-release;
            require-prior-idle-ms = <100>;
            tapping-term-ms = <250>;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 22 23 24 25 20 21 32 33 34 35 36 37>;
            quick-tap-ms = <150>;
        };

        comma_semicolon: comma_semicolon {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_SEMICOLON";
            bindings = <&kp COMMA>, <&kp SEMICOLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        period_colon: period_colon {
            compatible = "zmk,behavior-mod-morph";
            label = "PERIOD_COLON";
            bindings = <&kp PERIOD>, <&kp COLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mt_kt: mt_kt {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_KT";
            bindings = <&kp>, <&kt>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        cmd_tab: cmd_tab {
            compatible = "zmk,behavior-mod-morph";
            label = "CMD_TAB";
            bindings = <&kp TAB>, <&kp LA(LC(TAB))>;

            #binding-cells = <0>;
            mods = <(MOD_RGUI|MOD_LGUI)>;
            keep-mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        scmd_tab: scmd_tab {
            compatible = "zmk,behavior-mod-morph";
            label = "SCMD_TAB";
            bindings = <&kp LS(TAB)>, <&kp LA(LC(LS(TAB)))>;

            #binding-cells = <0>;
            mods = <(MOD_RGUI|MOD_LGUI)>;
        };
    };

    macros {
        dquote2: dquote {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOUBLE_QUOTES &kp DOUBLE_QUOTES &kp LEFT>;
            label = "DQUOTE";
        };

        squote2: squote {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SINGLE_QUOTE &kp SINGLE_QUOTE &kp LEFT>;
            label = "SQUOTE";
        };

        rbrace: lbrace {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_PARENTHESIS &kp RIGHT_PARENTHESIS &kp LEFT>;
            label = "LBRACE";
        };

        sbrace: rbrace {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACKET &kp RIGHT_BRACKET &kp LEFT>;
            label = "RBRACE";
        };

        cbrace: cbrace {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACE &kp RIGHT_BRACE &kp LEFT>;
            label = "CBRACE";
        };

        larrow: larrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LESS_THAN &kp MINUS>;
            label = "LARROW";
        };

        rarrow: rarrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp MINUS &kp GREATER_THAN>;
            label = "RARROW";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

        base {
            // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓

            label = "BASE";

            // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
            //             ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓   ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓
            //             ┃     Q     ┃     W     ┃     E     ┃     R     ┃     T     ┃   ┃     Z     ┃     U     ┃     I     ┃     O     ┃     P     ┃
            //             ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫
            //             ┃     A     ┃     S     ┃     D     ┃     F     ┃     G     ┃   ┃     H     ┃     J     ┃     K     ┃     L     ┃     -     ┃
            // ┏━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┓
            // ┃           ┃     Y     ┃     X     ┃     C     ┃     V     ┃     B     ┃   ┃     N     ┃     M     ┃     ,     ┃     .     ┃    TAB    ┃           ┃
            // ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛
            //                                     ┃  SK SHFT  ┃    MO1    ┃    ESC    ┃   ┃   SPACE   ┃    MO2    ┃   ENTER   ┃
            //                                     ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛   ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛

            bindings = <
                        &kp Q  &kp W  &kp E           &kp R            &kp T           &kp Y      &kp U         &kp I             &kp O          &kp P
                        &kp A  &kp S  &kp D           &kp F            &kp G           &kp H      &kp J         &kp K             &kp L          &mt LA(LC(LEFT_GUI)) ESCAPE
&mt LCTRL LEFT_BRACKET  &kp Z  &kp X  &kp C           &kp V            &kp B           &kp N      &kp M         &comma_semicolon  &period_colon  &kp TAB                      &mt RCTRL RIGHT_BRACKET
                                      &sk LEFT_SHIFT  &lt 2 BACKSPACE  &lt 4 DELETE    &kp SPACE  &lt 1 RETURN  &sk RIGHT_SHIFT
            >;
        };

        symbol {
            bindings = <
         &kp LS(EXCL)  &kp LS(AT)    &kp LS(POUND)  &kp LS(DLLR)         &kp LS(PRCNT)      &kp LS(CARET)  &kp LS(AMPS)   &kp LS(STAR)   &kp LS(PLUS)  &kp LS(QMARK)
         &kp EQUAL     &kp LS(LT)    &kp LS(LPAR)   &kp LS(RPAR)         &kp LS(GT)         &caps_word     &sk LGUI       &sk LCTRL      &sk LALT      &kp SLASH
&larrow  &kp TILDE     &kp LS(LBRC)  &kp LBKT       &kp RBKT             &kp RIGHT_BRACE    &kp GRAVE      &single_quote  &double_quote  &kp PIPE      &kp BACKSLASH  &rarrow
                                     &kp MINUS      &lt 3 LG(BACKSPACE)  &kp UNDER          &none          &trans         &none
            >;

            label = "SYM";
        };

        navigation {
            bindings = <
              &kp N1     &kp N2     &kp N3     &kp N4     &kp N5           &kp N6       &kp N7            &kp N8      &kp N9     &kp N0
              &kp LG(A)  &sk LALT   &sk LCTRL  &sk LGUI   &kp LG(LS(A))    &kp LEFT     &kp DOWN          &kp UP      &kp RIGHT  &lt 5 TAB
&kp LS(HOME)  &kp LG(Z)  &kp LG(X)  &kp LG(C)  &kp LG(V)  &kp LS(LG(Z))    &kp HOME     &kp PG_DN         &kp PG_UP   &kp END    &none      &kp LS(END)
                                    &none      &trans     &none            &kp LS(TAB)  &lt 3 LG(RETURN)  &caps_word
            >;

            label = "NAV";
        };

        numbers {
            bindings = <
        &kp N1                    &kp N2    &kp N3     &kp N4    &kp N5    &kp N6  &kp N7    &kp N8     &kp N9    &kp N0
        &sk LA(LC(LEFT_COMMAND))  &sk LALT  &sk LCTRL  &sk LGUI  &trans    &trans  &sk LGUI  &sk LCTRL  &sk LALT  &sk LA(LC(LEFT_COMMAND))
&trans  &trans                    &trans    &trans     &trans    &trans    &trans  &trans    &kp COMMA  &kp DOT   &trans                    &trans
                                            &none      &trans    &none     &none   &trans    &none
            >;

            label = "NUM";
        };

        function {
            bindings = <
               &kp F1                &kp F2        &kp F3        &kp F4                 &kp F5        &kp F6        &kp F7        &kp F8             &kp F9        &kp F10
               &sk LA(LC(LEFT_GUI))  &kp C_BRI_DN  &kp C_BRI_UP  &kp C_BRIGHTNESS_AUTO  &sys_reset    &bt BT_PRV    &kp K_MUTE    &kp C_VOLUME_DOWN  &kp C_VOL_UP  &bt BT_NXT
&kp LC(LG(Q))  &kp F11               &kp F12       &kp F13       &kp F14                &kp F15       &kp F16       &kp F17       &kp F18            &kp F19       &kp F20     &kp LG(LS(Q))
                                                   &none         &none                  &trans        &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2
            >;

            label = "FUN";
        };

        mouse {
            bindings = <
        &trans  &trans  &trans  &trans  &trans    &trans           &trans        &trans          &trans          &trans
        &trans  &trans  &trans  &trans  &trans    &msc SCRL_RIGHT  &msc SCRL_UP  &msc SCRL_DOWN  &msc SCRL_LEFT  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans           &trans        &trans          &trans          &trans  &trans
                        &trans  &trans  &trans    &mkp LCLK        &mkp MCLK     &mkp RCLK
            >;

            label = "MOU";
        };
    };
};

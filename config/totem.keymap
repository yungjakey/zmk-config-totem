//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define BASE 0
#define NAV  1
#define SYM  2
#define MOO  3

&caps_word {
    continue-list = <UNDERSCORE BACKSPACE DELETE LEFT_ARROW DOWN_ARROW UP_ARROW RIGHT_ARROW HOME END PAGE_DOWN PAGE_UP>;
    mods = <(MOD_RSFT|MOD_LSFT)>;
};

&mt { tapping-term-ms = <150>; };

&sk { quick-release; };

/ {
    combos {
        compatible = "zmk,combos";

        rbrace {
            bindings = <&rbrace>;
            key-positions = <12 13>;
            layers = <1>;
        };

        sbrace {
            bindings = <&sbrace>;
            key-positions = <23 24>;
            layers = <1>;
        };

        cbrace {
            bindings = <&cbrace>;
            key-positions = <22 25>;
            layers = <1>;
        };

        escape {
            bindings = <&kp ESCAPE>;
            key-positions = <16 17>;
        };

        clear_bluetooth {
            bindings = <&bt BT_CLR>;
            key-positions = <20 31>;
        };

        caps_word {
            bindings = <&caps_word>;
            key-positions = <32 37>;
        };

        caeAE {
            bindings = <&aeAE>;
            key-positions = <23 24>;
            layers = <0>;
        };

        cueUE {
            bindings = <&ueUE>;
            key-positions = <27 28>;
            layers = <0>;
        };

        coeOE {
            bindings = <&oeOE>;
            key-positions = <28 29>;
        };

        ss {
            bindings = <&ss>;
            key-positions = <23 22>;
            layers = <0>;
        };
    };

    behaviors {
        double_quote: double_quote {
            compatible = "zmk,behavior-tap-dance";
            label = "DOUBLE_QUOTE";
            #binding-cells = <0>;
            bindings = <&kp DOUBLE_QUOTES>, <&dquote2>;
        };

        single_quote: single_quote {
            compatible = "zmk,behavior-tap-dance";
            label = "SINGLE_QUOTE";
            #binding-cells = <0>;
            bindings = <&kp SINGLE_QUOTE>, <&squote2>;
        };

        grave_quote: grave_quote {
            compatible = "zmk,behavior-tap-dance";
            label = "GRAVE_QUOTE";
            #binding-cells = <0>;
            bindings = <&kp GRAVE>, <&gquote2>;
        };

        mt_left: mt_left {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_LEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 26 27 28 29 30 31 32 33 34 35 37 36>;
            require-prior-idle-ms = <100>;
            tapping-term-ms = <250>;
            quick-tap-ms = <150>;
        };

        mt_right: mt_right {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_RIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            hold-trigger-on-release;
            require-prior-idle-ms = <100>;
            tapping-term-ms = <250>;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 22 23 24 25 20 21 32 33 34 35 36 37>;
            quick-tap-ms = <150>;
        };

        comma_semicolon: comma_semicolon {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_SEMICOLON";
            bindings = <&kp COMMA>, <&kp SEMICOLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        period_colon: period_colon {
            compatible = "zmk,behavior-mod-morph";
            label = "PERIOD_COLON";
            bindings = <&kp PERIOD>, <&kp COLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        question_exclamation: question_exclamation {
            compatible = "zmk,behavior-mod-morph";
            label = "QUESTION_EXCLAMATION";
            bindings = <&kp QUESTION>, <&kp EXCLAMATION>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        slash_backslash: slash_backslash {
            compatible = "zmk,behavior-mod-morph";
            label = "SLASH_BACKSLASH";
            bindings = <&kp SLASH>, <&kp BACKSLASH>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        backspace_delete: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            label = "BACKSPACE_DELETE";
            bindings = <&kp BACKSPACE>, <&kp DELETE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mt_kt: mt_kt {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_KT";
            bindings = <&kp>, <&kt>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        mt_sk: mt_sk {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_SK";
            bindings = <&kp>, <&sk>;

            #binding-cells = <2>;
            tapping-term-ms = <198>;
        };

        td_sk_caps: td_sk_caps {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_SK_CAPS";
            #binding-cells = <0>;
            bindings = <&mt_sk LEFT_SHIFT LEFT_SHIFT>, <&caps_word>;
        };

        aeAE: aeAE {
            compatible = "zmk,behavior-mod-morph";
            label = "AEAE";
            bindings = <&aelower>, <&AEupper>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        ueUE: ueUE {
            compatible = "zmk,behavior-mod-morph";
            label = "UEUE";
            bindings = <&uelower>, <&UEupper>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        oeOE: oeOE {
            compatible = "zmk,behavior-mod-morph";
            label = "OEOE";
            bindings = <&oelower>, <&OEupper>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    macros {
        dquote2: dquote {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOUBLE_QUOTES &kp DOUBLE_QUOTES &kp LEFT>;
            label = "DQUOTE";
        };

        squote2: squote {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SINGLE_QUOTE &kp SINGLE_QUOTE &kp LEFT>;
            label = "SQUOTE";
        };

        gquote2: gquote {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GRAVE &kp GRAVE &kp GRAVE &kp GRAVE &kp GRAVE &kp GRAVE &kp LEFT &kp LEFT &kp LEFT>;
            label = "GQUOTE";
        };

        rbrace: lbrace {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_PARENTHESIS &kp RIGHT_PARENTHESIS &kp LEFT>;
            label = "LBRACE";
        };

        sbrace: rbrace {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACKET &kp RIGHT_BRACKET &kp LEFT>;
            label = "RBRACE";
        };

        cbrace: cbrace {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACE &kp RIGHT_BRACE &kp LEFT>;
            label = "CBRACE";
        };

        larrow: larrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LESS_THAN &kp MINUS>;
            label = "LARROW";
        };

        rarrow: rarrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp MINUS &kp GREATER_THAN>;
            label = "RARROW";
        };

        select_line: select_line {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp HOME &kp LS(END)>;
            label = "SELECT_LINE";
        };

        ss: ss {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(S)>;
            label = "SS";
        };

        aelower: aelower {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(U) &kp A>;
            label = "AELOWER";
        };

        AEupper: AEupper {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(U) &kp LS(A)>;
            label = "AEUPPER";
        };

        uelower: uelower {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(U) &kp U>;
            label = "UELOWER";
        };

        UEupper: UEupper {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(U) &kp LS(U)>;
            label = "UEUPPER";
        };

        oelower: oelower {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(U) &kp O>;
            label = "OELOWER";
        };

        OEupper: OEupper {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(U) &kp LS(O)>;
            label = "OEUPPER";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

        base {
            // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓

            label = "BASE";

            // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
            //             ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓   ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓
            //             ┃     Q     ┃     W     ┃     E     ┃     R     ┃     T     ┃   ┃     Z     ┃     U     ┃     I     ┃     O     ┃     P     ┃
            //             ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫
            //             ┃     A     ┃     S     ┃     D     ┃     F     ┃     G     ┃   ┃     H     ┃     J     ┃     K     ┃     L     ┃     -     ┃
            // ┏━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┓
            // ┃           ┃     Y     ┃     X     ┃     C     ┃     V     ┃     B     ┃   ┃     N     ┃     M     ┃     ,     ┃     .     ┃    TAB    ┃           ┃
            // ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛
            //                                     ┃  SK SHFT  ┃    MO1    ┃    ESC    ┃   ┃   SPACE   ┃    MO2    ┃   ENTER   ┃
            //                                     ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛   ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛

            bindings = <
                &kp Q  &kp W  &kp E        &kp R            &kp T        &kp Y      &kp U         &kp I             &kp O          &kp P
                &kp A  &kp S  &kp D        &kp F            &kp G        &kp H      &kp J         &kp K             &kp L          &kp LA(BACKSPACE)
&lt 4 LA(LEFT)  &kp Z  &kp X  &kp C        &kp V            &kp B        &kp N      &kp M         &comma_semicolon  &period_colon  &kp TAB            &lt 4 LA(RIGHT)
                              &td_sk_caps  &lt 2 BACKSPACE  &kp SPACE    &kp SPACE  &lt 1 RETURN  &td_sk_caps
            >;
        };

        symbol {
            bindings = <
       &kp LS(EXCL)  &kp LS(AT)    &kp LS(POUND)  &kp LS(DLLR)     &kp LS(PRCNT)    &kp LS(CARET)          &kp LS(AMPS)   &kp LS(STAR)   &kp LS(PLUS)  &kp LS(QMARK)
       &kp MINUS     &kp LS(LBRC)  &kp LBKT       &kp RBKT         &kp LS(RBRC)     &sk RA(RC(RIGHT_GUI))  &sk LGUI       &sk LCTRL      &sk LALT      &kp SLASH
&none  &kp TILDE     &kp LS(LT)    &kp LS(LPAR)   &kp LS(RPAR)     &kp LS(GT)       &grave_quote           &single_quote  &double_quote  &kp PIPE      &kp BACKSLASH  &none
                                   &kp EQUAL      &lt 3 BACKSPACE  &kp UNDER        &none                  &trans         &none
            >;

            label = "SYM";
        };

        navigation {
            bindings = <
              &kp N1     &kp N2     &kp N3     &kp N4     &kp N5                  &kp N6         &kp N7       &kp N8                        &kp N9     &kp N0
              &kp LG(A)  &sk LALT   &sk LCTRL  &sk LGUI   &sk LC(LA(LEFT_GUI))    &kp LEFT       &kp DOWN     &kp UP                        &kp RIGHT  &kp DELETE
&kp LS(HOME)  &kp LG(Z)  &kp LG(X)  &kp LG(C)  &kp LG(V)  &kp LS(LG(Z))           &kp HOME       &kp PG_DN    &kp PG_UP                     &kp END    &kp TAB     &kp LS(END)
                                    &none      &trans     &none                   &kp LG(SPACE)  &lt 3 ENTER  &mt_kt LEFT_SHIFT LEFT_SHIFT
            >;

            label = "NAV";
        };

        function {
            bindings = <
            &kp F1         &kp F2        &kp F3                &kp F4                &kp F5     &kp F6   &kp F7        &kp F8           &kp F9        &kp F10
            &kp LG(MINUS)  &kp LS(LALT)  &kp LS(LCTRL)         &kp LS(LGUI)          &kp F11    &kp F12  &kp LS(LGUI)  &kp LS(LCTRL)    &kp LS(LALT)  &kp LG(EQUAL)
&bt BT_PRV  &none          &none         &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &none      &none    &kp K_MUTE    &kp C_VOLUME_UP  &kp C_VOL_DN  &none          &bt BT_NXT
                                         &none                 &trans                &none      &none    &trans        &none
            >;

            label = "FUN";
        };

        windows {
            bindings = <
        &kp LA(LC(LG(Q)))  &kp LA(LG(LC(W)))  &kp LA(LG(LC(E)))  &kp LA(LG(LC(R)))          &kp LA(LC(LG(T)))        &kp LA(LC(LG(Y)))      &kp LA(LC(LG(U)))      &kp LA(LG(LC(I)))      &kp LA(LC(LG(O)))       &kp LA(LG(LC(P)))
        &kp LA(LG(LC(A)))  &kp LA(LC(LG(S)))  &kp LA(LC(LG(D)))  &kp LA(LC(LG(F)))          &kp LA(LC(LG(G)))        &kp LA(LC(LG(H)))      &kp LA(LC(LG(J)))      &kp LA(LC(LG(K)))      &kp LA(LC(LG(L)))       &kp LA(LC(LG(SEMICOLON)))
&trans  &kp LA(LC(LG(Z)))  &kp LA(LC(LG(X)))  &kp LA(LC(LG(C)))  &kp LA(LC(LG(V)))          &kp LA(LG(LC(B)))        &kp LA(LC(LG(N)))      &kp LA(LC(LG(M)))      &kp LA(LC(LG(COMMA)))  &kp LA(LC(LG(PERIOD)))  &kp LA(LC(LG(SLASH)))      &trans
                                              &trans             &kp LA(LC(LG(BACKSPACE)))  &kp LA(LC(LG(SPACE)))    &kp LA(LC(LG(SPACE)))  &kp LA(LC(LG(ENTER)))  &trans
            >;

            label = "WIN";
        };
    };
};
